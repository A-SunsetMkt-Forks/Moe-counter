'use strict'

const fs = require('fs')
const path = require('path')
const mimeType = require('mime-types')
const sizeOf = require('image-size')

const themePath = path.resolve(__dirname, '../assets/theme')
const imgExts = ['.jpg', '.jpeg', '.png', '.gif', '.webp']

const themeList = {}

fs.readdirSync(themePath).forEach(theme => {
  const currentThemePath = path.resolve(themePath, theme)
  // skip non-directory
  if (!fs.statSync(currentThemePath).isDirectory()) return

  if (!(theme in themeList)) themeList[theme] = {}
  const imgList = fs.readdirSync(currentThemePath)
  imgList.forEach(img => {
    // skip non-image files
    if (!imgExts.includes(path.extname(img).toLowerCase())) return

    const imgPath = path.resolve(currentThemePath, img)
    const char = path.parse(img).name
    const { width, height } = sizeOf(imgPath)

    themeList[theme][char] = {
      width,
      height,
      data: convertToDatauri(imgPath)
    }
  })
})

function convertToDatauri(path) {
  const mime = mimeType.lookup(path)
  const base64 = fs.readFileSync(path).toString('base64')

  return `data:${mime};base64,${base64}`
}

function getCountImage(params) {
  let { count, theme = 'moebooru', padding = 7, offset = 0, scale = 1, pixelated = '1', darkmode = 'auto' } = params

  if (!(theme in themeList)) theme = 'moebooru'
  padding = parseInt(padding, 10)
  offset = parseInt(offset, 10)

  // This is not the greatest way for generating an SVG but it'll do for now
  const countArray = count.toString().padStart(padding, '0').split('')
  const uniqueChar = [...new Set(countArray)]

  let x = 0, y = 0

  const defs = uniqueChar.reduce((ret, cur) => {
    let { width, height, data } = themeList[theme][cur]
    width *= scale
    height *= scale

    if (height > y) y = height

    ret = `${ret}
    <image id="${cur}" width="${width}" height="${height}" xlink:href="${data}" />`

    return ret
  }, '')

  const parts = countArray.reduce((ret, cur) => {
    let { width } = themeList[theme][cur]
    width *= scale

    const image = `${ret}
    <use x="${x}" xlink:href="#${cur}" />`

    x += width + offset

    return image
  }, '')

  // Fix the last image offset
  x -= offset

  const style = `
  svg {
    ${pixelated === '1' ? 'image-rendering: pixelated;' : ''}
    ${darkmode === '1' ? 'filter: brightness(.6);' : ''}
  }
  ${darkmode === 'auto' ? `@media (prefers-color-scheme: dark) { svg { filter: brightness(.6); } }` : ''}
  `

  return `<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by https://github.com/journey-ad/Moe-Counter -->
<svg viewBox="0 0 ${x} ${y}" width="${x}" height="${y}" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Moe Counter!</title>
  <style>${style}</style>
  <defs>${defs}
  </defs>
  <g>${parts}
  </g>
</svg>
`
}

module.exports = {
  themeList,
  getCountImage
}
